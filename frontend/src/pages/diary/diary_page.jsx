import { useState, useEffect } from 'react';
import background from '../../../src/assets/images/etc/basic_background3.png';
import TopBar from '../../components/top_bar';

function DiaryPage(){
    const token = sessionStorage.getItem('accessToken');
    const [usageTime, setUsageTime] = useState("Î°úÎî©Ï§ë ...");
    const [detailMonthData, setDetailMonthData] = useState([]);
    // Ïõî ÎàÑÏ†Å ÏãúÍ∞Ñ Í≤ÄÏÉâ ÏòàÏãú (ÎìúÎ°≠Î∞ïÏä§)
    const [selectedDateMonth, setSelectedDateMonth] = useState('2025-06');
    const currentDate = new Date().toLocaleDateString('ko-KR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    }); // ÌòÑÏû¨ ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ (Ïòà: 2025ÎÖÑ 6Ïõî 1Ïùº)

    useEffect(() => {
        console.log("üìÜ Ïõî ÏÑ†ÌÉù:", selectedDateMonth);
        if (selectedDateMonth) {
            fetchStretchingTimeByDate(selectedDateMonth);
        }
    }, [selectedDateMonth]);

    // Ìï¥ÌååÎ¶¨ ÎûúÎç§ Î©îÏãúÏßÄ
    const [randomMsg, setRandomMsg] = useState("");

    const messages = [
        "Ïò§ÎäòÎèÑ Ïä§Ìä∏Î†àÏπ≠ ÌñàÏßÄ?\nÏä§Ìä∏Î†àÏπ≠ ÏùºÏßÄÎ•º ÌôïÏù∏Ìï¥Î¥ê!",
        "Î™∏Ïù¥ Ï¢Ä ÌíÄÎ¶¨Îäî Í≤É Í∞ôÏïÑ!",
        "Í∏∞Î°ùÏùÄ ÏäµÍ¥ÄÏù¥ ÎêúÎã§!",
        "Ïò§ÎäòÏùÄ Ïñ¥Îñ§ ÎèôÏûëÏù¥ÏóàÏùÑÍπå?",
        "Í≥ÑÏÜçÌïòÎ©¥ Î∂ÑÎ™Ö Îã¨ÎùºÏ†∏!",
        "Í∏∞Î°ùÏùÄ ÎÑàÎ•º Î∞∞Ïã†ÌïòÏßÄ ÏïäÏïÑ.",
        "Ïä§Ìä∏Î†àÏπ≠ÏùÄ Ïò§ÎäòÎèÑ ÎÇòÎ•º ÏÇ¥Î¶∞Îã§.",
        "Íæ∏Ï§ÄÌï®Ïù¥ ÏµúÍ≥†Ïùò Í∏∞Ïà†Ïù¥Ïïº.",
        "ÌïòÎ£® 5Î∂Ñ, ÎÇòÎ•º ÏúÑÌïú Ìà¨Ïûê!",
        "ÎÇ¥ Î™∏Ïù¥ Í≥†ÎßàÏõåÌï† Í±∞Ïïº.",
        "Í∏∞Î°ùÏùÄ ÏûëÏßÄÎßå, ÌûòÏù¥ ÏûàÏñ¥.",
        "ÏûëÏùÄ ÏõÄÏßÅÏûÑÏù¥ ÌÅ∞ Ï∞®Ïù¥Î•º ÎßåÎì†Îã§.",
        "Ïò§ÎäòÎèÑ ÎÇòÎ•º ÎèåÎ≥¥Îäî Ï§ë üí™",
        "Ïñ¥Ï†úÎ≥¥Îã§ Îçî Ïú†Ïó∞Ìï¥Ï°åÏñ¥!",
        "Ï°∞Í∏à ÌûòÎì§Ïñ¥ÎèÑ, Ïò§ÎäòÎèÑ Ìï¥ÎÉàÎÑ§.",
        "Ïù¥Í±¥ Îã®ÏàúÌïú Ïä§Ìä∏Î†àÏπ≠Ïù¥ ÏïÑÎãàÏïº,\nÎÇòÎ•º ÏúÑÌïú ÏïΩÏÜçÏù¥Ïïº.",
        "Î™∏Í≥º ÎßàÏùå, Îëò Îã§ Ï±ôÍ∏∞Ïûê!",
        "ÏûëÏùÄ ÏäµÍ¥ÄÏù¥ Ïù∏ÏÉùÏùÑ Î∞îÍøî.",
    ];

        useEffect(() => {
            // ÏµúÏ¥à ÏßÑÏûÖ Ïãú ÎûúÎç§ Î©îÏãúÏßÄ ÏÑ§Ï†ï
            setRandomMsg(messages[Math.floor(Math.random() * messages.length)]);

            const interval = setInterval(() => {
            const idx = Math.floor(Math.random() * messages.length);
            setRandomMsg(messages[idx]);
            }, 3000); // 3Ï¥àÎßàÎã§

            return () => clearInterval(interval); // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï†ïÎ¶¨
        }, []);
    
    // Ïä§Ìä∏Î†àÏπ≠ Ï¥ù ÎàÑÏ†ÅÏãúÍ∞Ñ api (ÌäπÏ†ï ÏõîÏùò ÎàÑÏ†ÅÏãúÍ∞Ñ Ï°∞Ìöå)
    // ÏûÖÎ†•Îç∞Ïù¥ÌÑ∞ : 2025-05
    const fetchStretchingTimeByDate = async (date) => {
        try {
            const response = await fetch(`http://localhost:8000/users/stretch-time/month?month=${date}`, {
                method: "GET",
                headers: {
                    "Authorization": "Bearer " + token, 
                    "Content-Type": "application/json",
                },
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            // Ï∂úÎ†• Îç∞Ïù¥ÌÑ∞
            console.group(`1. Ï°∞ÌöåÌïú Ïõî: ${date}`);
            console.log("üéØ API Ìò∏Ï∂ú ÎÇ†Ïßú ÌååÎùºÎØ∏ÌÑ∞:", date);
            console.log("2. Ï¥ù Ïä§Ìä∏Î†àÏπ≠ ÏãúÍ∞Ñ:", data.total_usage_time + "Ï¥à");

            if (data.daily_records && data.daily_records.length > 0) {
                console.log("3. ÏÉÅÏÑ∏ ÏùºÎ≥Ñ Í∏∞Î°ù:");
                data.daily_records.forEach((record) => {
                    console.log(` - ${record.date}: ${record.usage_time}Ï¥à`);
                });
            } else {
                console.log("ÏÉÅÏÑ∏ Í∏∞Î°ù ÏóÜÏùå");
            }
            console.groupEnd();

            setUsageTime(data.total_usage_time); // Ï¥ù ÎàÑÏ†Å Ïä§Ìä∏Î†àÏπ≠ ÏãúÍ∞Ñ Ï†ÄÏû•
            setDetailMonthData(data.daily_records); // ÏùºÎ≥Ñ Ïä§Ìä∏Î†àÏπ≠ ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
            return data;

        } catch (error) {
            console.error("ÎÇ†ÏßúÎ≥Ñ Ïä§Ìä∏Î†àÏπ≠ ÏãúÍ∞Ñ Ï°∞Ìöå Ïã§Ìå®:", error);
        }
    };

    const getMonthOptions = () => {
        const options = [];

        for (let i = 0; i < 6; i++) {
            // iÎßåÌÅº ÎπºÍ∏∞ Ï†ÑÏóê Î∞îÎ°ú new Date()ÏóêÏÑú setMonth
            const localDate = new Date();
            localDate.setMonth(localDate.getMonth() - i);

            const year = localDate.getFullYear();
            const month = (localDate.getMonth() + 1).toString().padStart(2, '0');

            const value = `${year}-${month}`;
            const label = `${year}ÎÖÑ ${month}Ïõî`;

            options.push({ value, label });
        }

        return options;
    };

    return(
        <div className='w-full h-screen overflow-y-hidden'>
            <img
            src={background}
            alt="Background"
            className="fixed top-0 left-0 w-full h-screen object-cover z-[-1]"
        />
        <TopBar />
            <div className='absolute bottom-[5%] left-[10%] w-[10%] animate-float'>
                {/* ÎßêÌíçÏÑ† */}
                <div className="relative mb-2 right-[10%]">
                    <div className="bg-white text-[#532D2D] text-[0.8vw] font-semibold 
                                    w-[130%] px-[6%] py-[6%] 
                                    rounded-xl shadow-md text-center leading-relaxed">
                    {randomMsg}
                    </div>
                    {/* Í∞ÄÏö¥Îç∞ Íº¨Î¶¨ */}
                    <div className="absolute top-full left-1/2 -translate-x-1/2 w-0 h-0 
                                    border-l-[6px] border-r-[6px] border-t-[8px] 
                                    border-l-transparent border-r-transparent border-t-white" />
                </div>

                {/* Ï†§Î¶¨ Ïù¥ÎØ∏ÏßÄ */}
                <img src="/images/models/jelly23.png" alt="jelly" />
            </div>
            
            <div className='main flex justify-center items-center h-screen'>
            <div className='flex flex-col items-center justify-center relative w-[38%] h-[80%] bg-[#e0ded6] opacity-80 rounded-[3vw] shadow-lg border border-[#532d2d99]'>
                <h1 className='mb-[3%] mt-[2%] font-bold text-[2.5vw] text-[#532D2D]'>Ïä§Ìä∏Î†àÏπ≠ ÏùºÏßÄ</h1>

                <div className='flex flex-col items-center contentBox w-[85%] h-[80%] px-[5%] pt-[5%] rounded-[3vw] border-[3px] border-[#532d2d35]'>
                
                {/* ÎÇ†Ïßú */}
                <div className='date mb-[4%] text-[1.2vw] text-[#B5B0AA]'>{currentDate}</div>

                {/* ÎìúÎ°≠Î∞ïÏä§ */}
                <div className="relative mb-[3%]">
                    <select
                    className="bg-[#e0ded6] text-[#8D6755] px-[1.5vw] py-[0.8vw] rounded-xl focus:ring-2 focus:ring-[#CDBA94] cursor-pointer text-[1.2vw]"
                    value={selectedDateMonth}
                    onChange={(e) => {
                        const newMonth = e.target.value;
                        console.log("üìÖ ÏÑ†ÌÉùÌïú Ïõî:", newMonth);
                        setSelectedDateMonth(newMonth);
                    }}
                    >
                    {getMonthOptions().map((opt) => (
                        <option key={opt.value} value={opt.value}>
                        {opt.label}
                        </option>
                    ))}
                    </select>
                </div>

                {/* ÎàÑÏ†Å ÏãúÍ∞Ñ */}
                <section className='flex flex-col h-[15%] items-center'>
                    <h1 className='font-bold text-[1.6vw] text-[#522B2B] text-opacity-80'>Ïä§Ìä∏Î†àÏπ≠ ÎàÑÏ†Å ÏãúÍ∞Ñ</h1>
                    <div className='textLine w-full h-[1px] mt-[2%] bg-[#c0c0c0]'></div>
                    <div className='text-[1.8vw] text-[#552F2F] mt-[1%]'>
                        {usageTime !== null ? (
                            <>
                            <span className="text-[3vw] font-semibold mr-[0.5vw]">
                                {Math.floor(usageTime / 60)}
                            </span>
                            <span className="text-[1vw] text-[#CDBA94] mr-[1vw]">Î∂Ñ</span>
                            <span className="text-[3vw] font-semibold mr-[0.5vw]">
                                {usageTime % 60}
                            </span>
                            <span className="text-[1vw] text-[#CDBA94]">Ï¥à</span>
                            </>
                        ) : (
                            "Î°úÎî© Ï§ë..."
                        )}
                    </div>
                </section>

                {/* ÎÇ†ÏßúÎ≥Ñ ÏãúÍ∞Ñ */}
                <section className='flex flex-col h-[15%] items-center mt-[20%] mb-[3%]'>
                    <h1 className='font-bold text-[1.6vw] text-[#522B2B] text-opacity-80'>ÎÇ†Ïßú Î≥Ñ Ïä§Ìä∏Î†àÏπ≠ ÏãúÍ∞Ñ</h1>
                    <div className='textLine w-full h-[1px] mt-[2%] bg-[#c0c0c0]'></div>
                </section>

                {/* Î¶¨Ïä§Ìä∏ */}
                <div className='flex flex-col items-center gap-[4%] w-[60%] h-[80%] overflow-y-auto  mb-[3%]'>
                    {detailMonthData.map((record, idx) => {
                    const [month, day] = record.date.split('/').map(Number);
                    const correctedDate = new Date(2025, month - 1, day);
                    correctedDate.setDate(correctedDate.getDate());
                    const correctedMonth = correctedDate.getMonth() + 1;
                    const correctedDay = correctedDate.getDate();

                    return (
                        <div key={idx} className='flex flex-row gap-[4vw] mb-[0.5vw] items-center'>
                        <div className='bg-[#868361] opacity-40 w-[3vw] h-[3vw] flex items-center justify-center text-white text-[1vw] rounded-full'>
                            {correctedMonth}/{correctedDay}
                        </div>
                        <div className='text-[#535353] text-[1.5vw]'>
                            {Math.floor(record.usage_time / 60)}Î∂Ñ {record.usage_time % 60}Ï¥à
                        </div>
                        </div>
                    );
                    })}
                </div>
                </div>
            </div>
            </div>
        
        </div>
    );
}
export default DiaryPage;